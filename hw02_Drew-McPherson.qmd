---
title: "Functions-Iterations-Dates-purr"
format: html
editor: visual
---

## Instructions

Complete the following exercises using the `lubridate` and `purrr` packages in R. Ensure that your solutions are optimized and use functional programming principles where applicable.

1.  Load the necessary libraries.
2.  Answer each question in separate R code chunks.
3.  Provide detailed explanations for your approach.
4.  Submit the rendered HTML file.

```{r}
library(tidyverse)
library(lubridate)
library(purrr)
```

## Exercise Functions:

### Question 1

Write a function (using r code and structure demonstrated in class) to calculate a z score for a given observed value, a mean, and a standard deviation value. And then use your function to find a z score for the following problem. (Research the internet to find the formula used to calculate a z score)\
Observed value = 25.77, mean = 23.54, standard deviation = 2.442

```{r}
fun_z = function(value, mean, sd) { # Function to create z score
z = ((value - mean) / sd) # calculates the z score
  return(z) 
}
fun_z(25.77, 23.54, 2.442)
```

The z score is calculated as the observed value (x) minus the mean of the distribution $\mu$ divided by the standard deviation of the distribution $\sigma$ for the formula (x - $\mu$ ) / $\sigma$. The function is set with the variables value, mean, and sd, and returns the z score after it is run.

### Question 2

2.1 Write a function to calculate the natural log of a number multiplied by the common log of the same number divided by the cube root of a given prime number, $\dfrac{\ln x \times \log x }{\sqrt[3]{p}}$.\
2.2 Use your function to find the answer if the number to be used for both log expressions is 32 and the given prime number is 11, $x = 32, \;\;p=11$. Also use R code to round your answer to the nearest tenth

```{r}
fun_log = function(x, p) { # "x" is the target number, "P" must be a prime
  log_calc = (log(x) * log10(x)) / p^(1/3)
  return(log_calc)
}
round(fun_log(32, 11),1)
```

Fun_log is a function that calculates log_calc using two numbers (x) and (p = prime). The response is returned by taking the natural log of a number (x), multiplying it by the common log of the same number, and then dividing that number by the cube root of a prime (p).

### Question 3

Use and show R coding to calculate the standard deviation for each variable of the data table `mtcars` using the `Special For Loop Method`, which includes three components:

-   Output â€“ an object to store the results

-   Sequence â€“ the set of items to loop through

-   Body â€“ the operations performed in each iteration

```{r}
sd_vec = vector(mode = "numeric", length = length(mtcars)) # creating the vector before the loop to reserve memory and save speed.

for (i in seq_along(mtcars)) { # this line determines the number of iterations for the loop
  sd_vec[[i]] = sd(mtcars[[i]], na.rm = TRUE) # Calculates the standard deviation for each iteration of the loop
}
sd_vec
```

This code creates a For Loop that is equivalent to the across() function. sd_vec is created before the loop runs so that the memory is already allocated. Growing the vector inside the loop is slow and memory inefficient. For the loop itself, it is set to run for the whole "length" of mtcars. In other words, its number of columns. sd_vec\[\[i\]\] calculates the standard deviation for each column. Once the calculation is complete, the loop iterates to the next column.

### Question 4:

Write only one line of the code to return only the leap years for years 2024, 3021, 2000 or 1800, 800, 5050, 600 and 7156. using subsetting with `[]` and without using built-in functions.

```{r}
leapz = c(2024, 3021, 2000, 1800, 800, 5050, 600, 7156)
leapz[c(leapz %% 4 == 0) & ((leapz %% 100 != 0) | (leapz %% 400 == 0))] # this line extracts values from the vector according to a formula for leap years. 
```

The wording of the question is ambiguous, but I interpreted it as requesting that the code return only the years on the given list that are leap years. The section of the list that states 2000 or 1800 I determined was an error, since there is no condition for determining whether to choose 2000 or 1800. I also assumed that creating the vector was a necessary step before the requested "one line of the code" to extract the requested values. I made this assumption because that exercise most closely mirrors what was taught in class. I then used a leap year formula that I found online to make the calculation. I finally, I will verify my answer with the code below.

```{r}
tru_leap = leap_year(leapz)
leapz[tru_leap]
```

## Advanced Date Manipulation with lubridate

### Question 5:

Generate a sequence of dates from **January 1, 2015** to **December 31, 2025**, spaced by every **two months**. Extract the **year**, **quarter**, and **ISO week number** for each date.

```{r}

datez = seq(ymd("2015-01-01"), ymd("2025-12-31"), by = "2 months")
datez_df = tibble(
  dates = year(datez),
  quarters = quarter(datez),
  isoweek = isoweek(datez))
```

I used seq to generate a list of dates between the two dates noted. The dates had to be properly identified using ymd() for seq to recognize them as such. Since the question asks to extract each year, quarter, and ISO week number from each date, I determined that a tibble would be a better format than extracting each of these elements separately.

### Question 6:

Given the following dates, compute the difference in **months** and **weeks** between each consecutive pair.

``` r
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")
```

```{r}
# Need to convert the dates given into dates because they are characters in the vector above.
sample_dates = as.Date(c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05"))

# Creating vectors before the loop for efficiency and to allocate memory
n = length(sample_dates) - 1 # Subtract 1 from sample_dates length so that it does not try to calculate the final unpaired date
month_diffs = numeric(n)
week_diffs = numeric(n)

# Loop through and calculate differences
for (i in seq_len(n)) { 
  # Calculate weeks and months using interval
  week_diffs[i] = interval(sample_dates[i], sample_dates[i + 1]) / weeks(1)
  month_diffs[i] = interval(sample_dates[i], sample_dates[i + 1]) / months(1)
  # Note that the month calculation is based on an assumption of a 30 day month.
  print(paste0("Calculation ", i, ": Month Difference: ", month_diffs[i]))
  print(paste0("Calculation ", i, ": Week Difference: ", week_diffs[i]))
  }

```

To provide this information I assumed we were supposed to treat the vector, rather than manually creating each pair. I therefore created a loop based on the length of the vector, but subtracting 1 since the number of differences must be one less than the number of vectors. To calculate the difference between the dates, I used interval, since this is a lubridate function and was referenced in our reading. However, it should be noted that lubridate calculates a month as 30 days, and therefore the month calculation is based on this principle rather than literal months.

### Question 7: Higher-Order Functions with purrr

Using `map()` and `map_dbl()`, compute the **mean**, **median**, and **standard deviation** for each numeric vector in the following list:

``` r
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))
```

```{r}

# Re-create the list from above

num_lists <- list(
  c(4, 16, 25, 36, 49),
  c(2.3, 5.7, 8.1, 11.4),
  c(10, 20, 30, 40, 50)
)

# Create a tibble showing both map() and map_dbl() responses

answer = tibble(
  mapmean = unlist(map(num_lists, mean)),
  mapmedian = unlist(map(num_lists, median)),
  mapsd = unlist(map(num_lists, sd)), 
  map_dbl_mean = map_dbl(num_lists, mean), 
  map_dbl_median = map_dbl(num_lists, median), 
  map_dbl_sd = map_dbl(num_lists, sd)
)
answer
```

For this question I used both map and map_dbl to get the responses. map_dbl naturally created the right response since it returns floats. map() did not naturally return the right result because it normally returns lists. To counteract this I used unlist().

### Question 8: Combining lubridate and purrr

Given a list of mixed date formats, use `map()` and `possibly()` from `purrr` to safely convert them to **Date** format and extract the **month name**.

``` r
date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")
```

```{r}
# Input list
date_strings = list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")

# Using possibly() lets us safely evaluate the dates
safe_parse = possibly(
  ~ parse_date_time(.x, orders = c("ymd", "dmy", "Y/m/d", "d-b-Y"), quiet = TRUE),
  otherwise = NA_Date_
)

# Parse the dates from the converted string
parsed_dates = map(date_strings, safe_parse)
# apply the lubridate month function to each value and convert to character rather than number
month_names = map_chr(parsed_dates, ~ as.character(month(.x, label = TRUE, abbr = FALSE))) 

month_names 
```

Since there are different date formats possible for this problem, we will use possibly() to manage risk of an unacceptable datetime. parse_date_time() will manage the most obvious datetime formats such as ymd, dmy, y/m/d, and d-b-y, we still need to account for what happens if a totally unexpected value is provided. Possibly() therefore returns NA_date. This code is applied via map() to the dates provided, which returns the dates in proper datetime. Finally, the months are extracted from each of these dates via the lubridate month() function.

## Submission

-   Save your Quarto file after completing each problem, render it, then stage and commit the changes.\

-   Include well-commented code and clear explanations.\

-   Make at least **one commit per question**.\

-   Submit the rendered file to **Canvas** and push it to your **GitHub repository**.\

-   Provide the link to your GitHub repository in the **Canvas gradebook** as a text submission.\

ðŸ”¹ **Each problem is worth 10 points.**\

ðŸ”¹ You will receive an additional **20 points** if you correctly push your completed file to GitHub and make at least one commit for each question.\

**Good luck!**
